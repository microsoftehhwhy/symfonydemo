services:

    # The special "_defaults" section configures the default behaviors for registering
    # new services into the Symfony service container. This section has a local scope
    # only, which means it only affects the service definitions being registered by
    # this file.
    #
    # The "autowire" section tells Symfony to make its best to autowire new services
    # by introspecting their constructor.
    #
    # The "public" section with the FALSE boolean value forces all new autowired classes
    # to be declared as private services. Marking services private limits their scope to
    # the Symfony service container itself only. They're not accessible from the outside
    # world and thus let the service container optimizes itself when it's being compiled
    # and dumped to raw PHP code.
    _defaults:
        autowire: true
        public: false

    # The special "_instanceof" section appends additional wiring configuration 
    # to any service definitions that match the listed types.
    #
    # For instance, the first rule adds a special "kernel.event_subscriber" tag
    # to any definitions declared in this file whose class is an instance of the
    # "Symfony\Component\EventDispatcher\EventSubscriberInterface" class or interface.
    _instanceof:
        Symfony\Component\EventDispatcher\EventSubscriberInterface:
            tags: ['kernel.event_subscriber']

        Symfony\Component\Form\FormTypeInterface:
            tags: ['form.type']

        Symfony\Component\Security\Core\Authorization\VoterInterface:
            tags: ['security.voter']

        Twig_ExtensionInterface:
            tags: ['twig.extension']

        # The following settings will be appended to any local service definitions
        # whose class matches this type. In this example, it will only apply to
        # the "AppBundle\Controller\Admin\BlogController" service discovered by
        # the "AppBundle\Controller\" rule below.
        AppBundle\Controller\Admin\BlogController:
            getters:
                getSlugger: '@AppBundle\Utils\Slugger'

    # This section enables to automatically register all classes found in the matching
    # file paths and directories as services in the container. File and directory
    # matching uses any valid glob pattern to create a white list of paths.
    #
    # In this example, the classes found in the following directories will be
    # automatically registered as services:
    #
    # * src/AppBundle/EventListener/
    # * src/AppBundle/Form/Type/
    # * src/AppBundle/Security/
    # * src/AppBundle/Twig/
    # * src/AppBundle/Utils/
    #
    # The "resource" attribute can accept more specific glob patterns like
    # "{EventListener/*Subscriber.php,Form/Type/*Type.php}".
    AppBundle\:
        # Register all classes in the src/AppBundle directory as services
        resource: '../../src/AppBundle/{EventListener,Form/Type,Security,Twig,Utils}'

    # The other section defines a rule to automatically register and autowire the
    # controller classes found in the src/AppBundle/Controller/ directory.
    #
    # By default all services are made private according to the global "_defaults"
    # section at the top of this file.
    #
    # However, in Symfony, controllers must always be declared public in order to
    # be lazy instanciated when they're really needed. This is why the inherited
    # default "public" attribute is overriden to force the registered controller
    # services to be marked public.
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true

    # This third party Twig extension must be manually registered as a service
    # because its class doesn't live in any of the previous defined directories.
    #
    # Thus, its class is not namespaced and cannot be defined in a global rule.
    # Indeed, registering new classes whose filename matches a glob pattern as
    # services like in the two previous sections only works for namespaced classes.
    app.twig.intl_extension:
        class:  Twig_Extensions_Extension_Intl

    # Some classes cannot be fully autowired because their methods accept either
    # some scalar arguments that Symfony cannot guess or a typehinted dependency
    # for which the container has at least two registered services matching the
    # type.
    #
    # Both the "AppBundle\Twig\AppExtension" and "AppBundle\EventListener\RedirectToPreferredLocaleSubscriber"
    # classes have a "__construct()" method that receives a "$locales" scalar argument
    # that Symfony cannot guess. This is why we must manually and explicitly provide
    # the wiring of this argument to complete their service definitions.
    #
    # To do so, the remaining unwired named arguments must be defined with their
    # corresponding values. Here, the "$locales" named argument is configured to
    # receive the value of the global "%app_locales%" parameter defined under the
    # "parameters" section of the "app/config/config.yml" file.
    #
    # Note that the order in which the named arguments are defined below doesn't
    # matter as they're referenced here by their real names in the PHP code.
    # Symfony is then smart enough to make the corresponding matching when compiling,
    # optimizing and dumping the container as a raw PHP class in the cache directory.
    AppBundle\Twig\AppExtension:
        $locales: '%app_locales%'

    AppBundle\EventListener\RedirectToPreferredLocaleSubscriber:
        $locales: '%app_locales%'

    AppBundle\EventListener\CommentNotificationSubscriber:
        $sender: '%app.notifications.email_sender%'
