---------------------------------------------------------------------------

by dzuelke at 2016-01-19T18:31:57Z

There you go @stof!

---------------------------------------------------------------------------

by dzuelke at 2016-01-19T18:33:11Z

Now that AppVeyor build failure is of course not great... :/ Windows path name messes stuff up it seems.

---------------------------------------------------------------------------

by javiereguiluz at 2016-01-19T19:04:47Z

@dzuelke thanks for proposing these changes. We'll gladly help you make this app more Heroku-friendly.

But first, I have some questions for the community and specially for @stof, which was your first reviewer:

  * I don't like to include the DoctrineFixtures bundle in production ... but I can't think of any viable alternative.
  * OK for the `database_url` option, unless someone sees some drawbacks.
  * The only thing I don't like is the change in the production logs. I understand it as: *"let's "break" production logs for everybody so Heroku users can see those logs"*. I'm afraid that logging into `prod.log` is the well-known and documented behavior that users expect from us. Can we solve this differently to make Heroku users happy and the rest of us too?

Thanks!

---------------------------------------------------------------------------

by dzuelke at 2016-01-19T19:23:36Z

One simple approach would be a new environment, e.g. `heroku`, that has that setting, @javiereguiluz.

However, logging to `php://stderr` doesn't really "break" things for others - this way, the logs end up in the web server's error logs. Most other languages' frameworks log to stderr by default, simply because it's easier to consume that log info and direct it elsewhere for central aggregation. It's the Docker standard too.

So it should maybe be(come) the default in the PHP world, too ;) Such a setup is easier to maintain - no worrying about tailing log files, no `logs` folder creation or  no messing around with Docker's filesystem that throws errors on `tail -f`, and so forth. Once you run more than one server, you want to centrally aggregate the logs anyway (since otherwise you need to log into each of your machines until you find the one that served that request), and then writing to a file is an unnecessary intermediate step.

It should also be the default for development, because then errors and other log info would end up where they belong - in the console output for `app/console server:run` (currently, nothing gets displayed there, but that's fixable in Symfony). All Python/Ruby/Node/... web servers I am familiar with do that, too.

---------------------------------------------------------------------------

by dzuelke at 2016-01-19T19:24:53Z

We can also leave the log setting as is, and I drop a `Procfile` into the repo (it currently gets auto-generated by `prepareDeploymentTarget`) with a `web` command that explicitly tails `error.log`, but I figured the `stderr` was simpler...

---------------------------------------------------------------------------

by dzuelke at 2016-01-19T19:25:56Z

Okay so `url` breaks SQLite runs because of https://github.com/doctrine/dbal/issues/1106, investigating a workaround until DBAL 2.5.5 is out...

---------------------------------------------------------------------------

by dzuelke at 2016-01-19T20:58:59Z

AppVeyor fixed. Threw a very basic workaround for the SQLite issue into `config_dev.yml`; can we leave it like that for the moment?

@stof what's your thoughts on the `stderr` situation? IMO Symfony as a whole should move towards that as the default, because it means logs are "free" - e.g. in a Docker run, they will automatically bubble up into a `docker-compose` output etc.

---------------------------------------------------------------------------

by dzuelke at 2016-01-25T06:58:59Z

Bump @javiereguiluz @stof @fabpot? :)

---------------------------------------------------------------------------

by dzuelke at 2016-01-26T03:49:28Z

I fixed a few formatting things that have been noted by people. I'll squash that into other commits once everyone is happy.

Anything else before you'd like to merge it, @javiereguiluz and @fabpot ? :)

---------------------------------------------------------------------------

by fabpot at 2016-01-26T15:05:59Z

LGTM

---------------------------------------------------------------------------

by stof at 2016-01-26T15:11:11Z

:+1:

---------------------------------------------------------------------------

by dzuelke at 2016-01-26T15:39:40Z

Great. Wielding my rebase chainsaws...

---------------------------------------------------------------------------

by dzuelke at 2016-01-26T16:49:29Z

(almost done; rebasing `composer.lock` changes)

---------------------------------------------------------------------------

by dzuelke at 2016-01-26T16:57:54Z

Okay, that should be it. Merge away, @fabpot or @javiereguiluz!

---------------------------------------------------------------------------

by stof at 2016-01-26T20:14:04Z

:+1:
